#summary 中文版api

*!activityresultfacade*
 * [#setresultboolean setresultboolean]
 * [#setresultbooleanarray setresultbooleanarray]
 * [#setresultbyte setresultbyte]
 * [#setresultbytearray setresultbytearray]
 * [#setresultchar setresultchar]
 * [#setresultchararray setresultchararray]
 * [#setresultdouble setresultdouble]
 * [#setresultdoublearray setresultdoublearray]
 * [#setresultfloat setresultfloat]
 * [#setresultfloatarray setresultfloatarray]
 * [#setresultinteger setresultinteger]
 * [#setresultintegerarray setresultintegerarray]
 * [#setresultlong setresultlong]
 * [#setresultlongarray setresultlongarray]
 * [#setresultserializable setresultserializable]
 * [#setresultshort setresultshort]
 * [#setresultshortarray setresultshortarray]
 * [#setresultstring setresultstring]
 * [#setresultstringarray setresultstringarray]
*!alarmmanagerfacade*
 * [#cancelrepeating cancelrepeating]
 * [#scheduleabsolute scheduleabsolute]
 * [#scheduleinexactrepeating scheduleinexactrepeating]
 * [#schedulerelative schedulerelative]
 * [#schedulerepeating schedulerepeating]
*!androidfacade*
 * [#getclipboard getclipboard]
 * [#getinput getinput]
 * [#getintent getintent]
 * [#getpackageversion getpackageversion]
 * [#getpackageversioncode getpackageversioncode]
 * [#getpassword getpassword]
 * [#log log]
 * [#maketoast maketoast]
 * [#notify notify]
 * [#requiredversion requiredversion]
 * [#sendemail sendemail]
 * [#setclipboard setclipboard]
 * [#startactivity startactivity]
 * [#startactivityforresult startactivityforresult]
 * [#vibrate vibrate]
*!applicationmanagerfacade*
 * [#forcestoppackage forcestoppackage]
 * [#getlaunchableapplications getlaunchableapplications]
 * [#getrunningpackages getrunningpackages]
 * [#launch launch]
*!batterymanagerfacade*
 * [#batterycheckpresent batterycheckpresent]
 * [#batterygethealth batterygethealth]
 * [#batterygetlevel batterygetlevel]
 * [#batterygetplugtype batterygetplugtype]
 * [#batterygetstatus batterygetstatus]
 * [#batterygettechnology batterygettechnology]
 * [#batterygettemperature batterygettemperature]
 * [#batterygetvoltage batterygetvoltage]
 * [#batterystartmonitoring batterystartmonitoring]
 * [#batterystopmonitoring batterystopmonitoring]
 * [#readbatterydata readbatterydata]
*!bluetoothfacade*
 * [#bluetoothaccept bluetoothaccept]
 * [#bluetoothconnect bluetoothconnect]
 * [#bluetoothgetconnecteddevicename bluetoothgetconnecteddevicename]
 * [#bluetoothmakediscoverable bluetoothmakediscoverable]
 * [#bluetoothread bluetoothread]
 * [#bluetoothreadline bluetoothreadline]
 * [#bluetoothreadready bluetoothreadready]
 * [#bluetoothstop bluetoothstop]
 * [#bluetoothwrite bluetoothwrite]
 * [#checkbluetoothstate checkbluetoothstate]
 * [#togglebluetoothstate togglebluetoothstate]
*!camerafacade*
 * [#cameracapturepicture cameracapturepicture]
 * [#camerainteractivecapturepicture camerainteractivecapturepicture]
*!commonintentsfacade*
 * [#pick pick]
 * [#scanbarcode scanbarcode]
 * [#search search]
 * [#view view]
 * [#viewcontacts viewcontacts]
 * [#viewhtml viewhtml]
 * [#viewmap viewmap]
*!conditionmanagerfacade*
 * [#onringersilent onringersilent]
*!contactsfacade*
 * [#contactsget contactsget]
 * [#contactsgetattributes contactsgetattributes]
 * [#contactsgetbyid contactsgetbyid]
 * [#contactsgetcount contactsgetcount]
 * [#contactsgetids contactsgetids]
 * [#pickcontact pickcontact]
 * [#pickphone pickphone]
*!eventfacade*
 * [#postevent postevent]
 * [#receiveevent receiveevent]
 * [#waitforevent waitforevent]
*!locationfacade*
 * [#geocode geocode]
 * [#getlastknownlocation getlastknownlocation]
 * [#readlocation readlocation]
 * [#startlocating startlocating]
 * [#stoplocating stoplocating]
*!mediarecorderfacade*
 * [#recordercapturevideo recordercapturevideo]
 * [#recorderstartmicrophone recorderstartmicrophone]
 * [#recorderstop recorderstop]
 * [#startinteractivevideorecording startinteractivevideorecording]
*!phonefacade*
 * [#checknetworkroaming checknetworkroaming]
 * [#getcelllocation getcelllocation]
 * [#getdeviceid getdeviceid]
 * [#getdevicesoftwareversion getdevicesoftwareversion]
 * [#getline1number getline1number]
 * [#getneighboringcellinfo getneighboringcellinfo]
 * [#getnetworkoperator getnetworkoperator]
 * [#getnetworkoperatorname getnetworkoperatorname]
 * [#getnetworktype getnetworktype]
 * [#getphonetype getphonetype]
 * [#getsimcountryiso getsimcountryiso]
 * [#getsimoperator getsimoperator]
 * [#getsimoperatorname getsimoperatorname]
 * [#getsimserialnumber getsimserialnumber]
 * [#getsimstate getsimstate]
 * [#getsubscriberid getsubscriberid]
 * [#getvoicemailalphatag getvoicemailalphatag]
 * [#getvoicemailnumber getvoicemailnumber]
 * [#phonecall phonecall]
 * [#phonecallnumber phonecallnumber]
 * [#phonedial phonedial]
 * [#phonedialnumber phonedialnumber]
 * [#readphonestate readphonestate]
 * [#starttrackingphonestate starttrackingphonestate]
 * [#stoptrackingphonestate stoptrackingphonestate]
*!pulsegeneratorfacade*
 * [#pulsegeneratorgethz pulsegeneratorgethz]
 * [#pulsegeneratorgethzsamples pulsegeneratorgethzsamples]
 * [#pulsegeneratorgetleftpulsems pulsegeneratorgetleftpulsems]
 * [#pulsegeneratorgetleftpulsepercent pulsegeneratorgetleftpulsepercent]
 * [#pulsegeneratorgetleftpulsesamples pulsegeneratorgetleftpulsesamples]
 * [#pulsegeneratorgetrightpulsems pulsegeneratorgetrightpulsems]
 * [#pulsegeneratorgetrightpulsepercent pulsegeneratorgetrightpulsepercent]
 * [#pulsegeneratorgetrightpulsesamples pulsegeneratorgetrightpulsesamples]
 * [#pulsegeneratorisplaying pulsegeneratorisplaying]
 * [#pulsegeneratorrun pulsegeneratorrun]
 * [#pulsegeneratorsethzpercent pulsegeneratorsethzpercent]
 * [#pulsegeneratorsetleftpulsepercent pulsegeneratorsetleftpulsepercent]
 * [#pulsegeneratorsetrightpulsepercent pulsegeneratorsetrightpulsepercent]
 * [#pulsegeneratorstop pulsegeneratorstop]
 * [#pulsegeneratortoggleinverted pulsegeneratortoggleinverted]
 * [#pulsegeneratortoggleplayback pulsegeneratortoggleplayback]
 * [#pulsegenteratorsethz pulsegenteratorsethz]
*!sensormanagerfacade*
 * [#readsensors readsensors]
 * [#sensorsgetaccuracy sensorsgetaccuracy]
 * [#sensorsgetlight sensorsgetlight]
 * [#sensorsreadaccelerometer sensorsreadaccelerometer]
 * [#sensorsreadmagnetometer sensorsreadmagnetometer]
 * [#sensorsreadorientation sensorsreadorientation]
 * [#startsensing startsensing]
 * [#stopsensing stopsensing]
*!settingsfacade*
 * [#checkairplanemode checkairplanemode]
 * [#checkringersilentmode checkringersilentmode]
 * [#checkscreenon checkscreenon]
 * [#getmaxmediavolume getmaxmediavolume]
 * [#getmaxringervolume getmaxringervolume]
 * [#getmediavolume getmediavolume]
 * [#getringervolume getringervolume]
 * [#getscreenbrightness getscreenbrightness]
 * [#getscreentimeout getscreentimeout]
 * [#setmediavolume setmediavolume]
 * [#setringervolume setringervolume]
 * [#setscreenbrightness setscreenbrightness]
 * [#setscreentimeout setscreentimeout]
 * [#toggleairplanemode toggleairplanemode]
 * [#toggleringersilentmode toggleringersilentmode]
*!signalstrengthfacade 需要 api level 7.*
 * [#readsignalstrengths readsignalstrengths]
 * [#starttrackingsignalstrengths starttrackingsignalstrengths]
 * [#stoptrackingsignalstrengths stoptrackingsignalstrengths]
*!smsfacade*
 * [#smsdeletemessage smsdeletemessage]
 * [#smsgetattributes smsgetattributes]
 * [#smsgetmessagebyid smsgetmessagebyid]
 * [#smsgetmessagecount smsgetmessagecount]
 * [#smsgetmessageids smsgetmessageids]
 * [#smsgetmessages smsgetmessages]
 * [#smsmarkmessageread smsmarkmessageread]
 * [#smssend smssend]
*!speechrecognitionfacade*
 * [#recognizespeech recognizespeech]
*!texttospeechfacade 需要 api level 4.*
 * [#ttsisspeaking ttsisspeaking]
 * [#ttsspeak ttsspeak]
*!tonegeneratorfacade*
 * [#generatedtmftones generatedtmftones]
*!uifacade*
 * [#addcontextmenuitem addcontextmenuitem]
 * [#addoptionsmenuitem addoptionsmenuitem]
 * [#clearcontextmenu clearcontextmenu]
 * [#clearoptionsmenu clearoptionsmenu]
 * [#dialogcreatealert dialogcreatealert]
 * [#dialogcreatedatepicker dialogcreatedatepicker]
 * [#dialogcreatehorizontalprogress dialogcreatehorizontalprogress]
 * [#dialogcreateinput dialogcreateinput]
 * [#dialogcreatepassword dialogcreatepassword]
 * [#dialogcreateseekbar dialogcreateseekbar]
 * [#dialogcreatespinnerprogress dialogcreatespinnerprogress]
 * [#dialogcreatetimepicker dialogcreatetimepicker]
 * [#dialogdismiss dialogdismiss]
 * [#dialoggetinput dialoggetinput]
 * [#dialoggetpassword dialoggetpassword]
 * [#dialoggetresponse dialoggetresponse]
 * [#dialoggetselecteditems dialoggetselecteditems]
 * [#dialogsetcurrentprogress dialogsetcurrentprogress]
 * [#dialogsetitems dialogsetitems]
 * [#dialogsetmaxprogress dialogsetmaxprogress]
 * [#dialogsetmultichoiceitems dialogsetmultichoiceitems]
 * [#dialogsetnegativebuttontext dialogsetnegativebuttontext]
 * [#dialogsetneutralbuttontext dialogsetneutralbuttontext]
 * [#dialogsetpositivebuttontext dialogsetpositivebuttontext]
 * [#dialogsetsinglechoiceitems dialogsetsinglechoiceitems]
 * [#dialogshow dialogshow]
 * [#webviewshow webviewshow]

===,,setresultboolean,,===
设置脚本被startactivityforresult()方法调用后返回的布尔值:
{{{
setresultboolean(
 integer resultcode:回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 boolean resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultbooleanarray,,===
设置脚本被startactivityforresult()方法调用后返回的布尔值数组:
{{{
setresultboolean(
 integer resultcode:回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 boolean[] resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultbyte,,===
设置脚本被startactivityforresult()方法调用后返回的字节:
{{{
setresultbyte(
 integer resultcode:回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 byte resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultbytearray,,===
设置脚本被startactivityforresult()方法调用后返回的字节数组:
{{{
setresultbytearray(
 integer resultcode:回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 byte[] resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultchar,,===
设置脚本被startactivityforresult()方法调用后返回的字符:
{{{
setresultchar(
 integer resultcode:回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 character resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultchararray,,===
设置脚本被startactivityforresult()方法调用后返回的字符数组:
{{{
setresultchararray(
 integer resultcode:回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 character[] resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultdouble,,===
设置脚本被startactivityforresult()方法调用后返回的的双精度浮点数值:
{{{
setresultdouble(
 integer resultcode:回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 double resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultdoublearray,,===
设置脚本被startactivityforresult()方法调用后返回的双精度浮点数值数组:
{{{
setresultdoublearray(
 integer resultcode:回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 double[] resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultfloat,,===
设置脚本被startactivityforresult()方法调用后返回的的单精度浮点数值:
{{{
setresultfloat(
 integer resultcode: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 float resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultfloatarray,,===
设置脚本被startactivityforresult()方法调用后返回的单精度浮点型数组:
{{{
setresultfloatarray(
 integer resultcode: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 float[] resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultinteger,,===
设置脚本被startactivityforresult()方法调用后返回的整数:
{{{
setresultinteger(
 integer resultcode: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 integer resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultintegerarray,,===
设置脚本被startactivityforresult()方法调用后返回的整型数组:
{{{
setresultintegerarray(
 integer resultcode: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 integer[] resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultlong,,===
设置脚本被startactivityforresult()方法调用后返回的长整数:
{{{
setresultlong(
 integer resultcode: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 long resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultlongarray,,===
设置脚本被startactivityforresult()方法调用后返回的长整型数组:
{{{
setresultlongarray(
 integer resultcode: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 long[] resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultserializable,,===
设置脚本被startactivityforresult()方法调用后返回的可串行化的结果(serializable):
{{{
setresultserializable(
 integer resultcode: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 serializable resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultshort,,===
设置脚本被startactivityforresult()方法调用后返回的短整数:
{{{
setresultshort(
 integer resultcode:: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 short resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultshortarray,,===
设置脚本被startactivityforresult()方法调用后返回的短整型数组:
{{{
setresultshortarray(
 integer resultcode:: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 short[] resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultstring,,===
设置脚本被startactivityforresult()方法调用后返回的字符串:
{{{
setresultstring(
 integer resultcode: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 string resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,setresultstringarray,,===
设置脚本被startactivityforresult()方法调用后返回的字符串数组:
{{{
setresultstringarray(
 integer resultcode: 回传给原始activity的结果编码, 
常常是result_canceled(0) 或者 result_ok(-1),
 string[] resultvalue)

设置脚本执行的结果.每当脚本程序被startactivityforresult()
方法调用时,由此产生的intent将会包含script_result和给定的值.
}}}

===,,cancelrepeating,,===
取消脚本的定时执行计划:
{{{
cancelrepeating(
 string script)

取消给定脚本所有的定时(重复)执行计划
}}}

===,,scheduleabsolute,,===
定时执行传入的脚本，从开机后开始计时：
{{{
scheduleabsolute(
 string script: 要执行的脚本,
 double time: 脚本延迟执行时间, 开机(epoch?)后延迟一定时间执行脚本,延迟的时间由此参数指定
 boolean wakeup[optional, default true]: 是否唤醒处于黑屏状态的移动设备)

定时执行传入的脚本,从开机后开始计时
}}}

===,,scheduleinexactrepeating,,===
每隔一段端时间执行一次脚本（时间间隔不太精确）
{{{
scheduleinexactrepeating(
 double interval: 两次执行之间的时间间隔,以秒为单位
 string script: 要执行的脚本,
 boolean wakeup[optional, default true]: 是否唤醒处于黑屏状态的移动设备)

从脚本被调用开始,每隔一段时间执行一次脚本(不是很精确),但是比schedulerepeating方法省电
}}}

===,,schedulerelative,,===
定时执行脚本,延迟时间从方法被调用时开始计算
{{{
schedulerelative(
 string script: 要执行的脚本,
 double secondsfromnow: 从现在起,延迟一定时间执行脚本,延迟时间由此参数指定
 boolean wakeup[optional, default true]: 是否唤醒处于黑屏状态的移动设备)

从脚本被调用开始，延迟数秒钟后执行脚
}}}

===,,schedulerepeating,,===
每隔一段时间执行一次脚本（精确）
{{{
schedulerepeating(
 double interval: 两次执行之间的时间间隔,以秒为单位
 string script: 要执行的脚本,
 double firstexecutiontime[optional]: 第一次执行脚本所需要延迟的时间,从开机(epoch?)开始计算
 boolean wakeup[optional, default true]:是否唤醒处于黑屏状态的移动设备)

每隔一段时间执行一次脚本,从开机开始计算
}}}

===,,getclipboard,,===
读取剪贴板中的文本
{{{
getclipboard()

从剪贴板中读取文本。

返回值:
  剪贴板中的文本。
}}}

===,,getinput,,===
请求用户输入文本
{{{
getinput(
 string title[可选, 默认为 sl4a inpu]: 输入框的标题
 string message[k可选, 默认为 please enter value:]: 输入框的提示信息)

请求用户输入文本信息

已废弃，请使用dialoggetinput方法替代。
}}}

===,,getintent,,===
获取启动脚本的intent
{{{
getintent()

返回启动脚本的intent
}}}

===,,getpackageversion,,===
返回包的版本名
{{{
getpackageversion(
  string packagename)

返回包的版本名
}}}

===,,getpackageversioncode,,===
返回包的版本号
{{{
getpackageversioncode(
  string packagename)

返回包的版本号
}}}

===,,getpassword,,===
请求用户输入密码
{{{
getpassword(
 string title[optional, default sl4a password input]: title of the input box,
 string message[optional, default please enter password:]: message to display   
above the input box)

请求用户输入密码。

已废弃!请使用dialoggetpassword方法替代。
}}}

===,,log,,===
写日志
{{{
log(
  string message)

向logcat中写入信息。
}}}

===,,maketoast,,===
显示短暂提示框
{{{
maketoast(
  string message)

显示一个持续短暂时间的提示框。
}}}

===,,notify,,===
通知
{{{
notify(
 string title: 标题,
 string message)

显示一个通知，在用户点击后会取消。
}}}

===,,requiredversion,,===
检测版本信息
{{{
requiredversion(
 integer requiredversion)

检测当前sl4a的版本是否大于制定的版本。
}}}

===,,sendemail,,===
发邮件
{{{
sendemail(
 string to: 一系列的收件人列表，用逗号分隔。
 string subject,
 string body,
 string attachmenturi[可选])

启动一个发送邮件的activity，将内容发送给接收者。
}}}

===,,setclipboard,,===
向剪贴板写入信息
{{{
setclipboard(
  string text)

向剪贴板写入信息。
}}}

===,,startactivity,,===
启动一个activity
{{{
startactivity(
 string action,
 string uri[可选],
 string type[k可选]: uri的mime类型/子类型,
 jsonobject extras[可选]: 要添加到intent的附加数据，以map形式保存,
 boolean wait[可选]: 阻塞当前应用知道打开的activity被关闭)

启动一个activity
}}}

===,,startactivityforresult,,===
运行一个activity并返回结果
{{{
startactivityforresult(
 string action,
 string uri[可选],
 string type[可选]: uri的mime类型/子类型,
 jsonobject extras[可选]: 要添加到intent的附加数据，以map形式保存)

运行一个activity并返回结果
返回:
  最终的intent,以map形式呈现
}}}

===,,vibrate,,===
震动
{{{
vibrate(
 integer duration[可选, 默认为 300]: 持续时间,以毫秒为单位)

使手机震动指定的时间。
}}}

===,,forcestoppackage,,===
强制终止一个包
{{{
forcestoppackage(
 string packagename: 包名)

强制终止一个包。
}}}

===,,getlaunchableapplications,,===
获得可运行的应用
{{{
getlaunchableapplications()

返回一个可以运行的应用类名列表
}}}

===,,getrunningpackages,,===
返回正在运行的activity或者服务的列表
{{{
getrunningpackages()

返回一个正在运行的activity或者服务的列表。

返回:
  一个正在运行activity的列表。
}}}

===,,launch,,===
启动一个activity
{{{
launch(
  string classname)

按照给定的类名启动一个activity。
}}}

===,,batterycheckpresent,,===
查看电池电量信息:
{{{
batterycheckpresent()

返回当前的电池电量信息
需要 api level 5.
}}}

===,,batterygethealth,,===
查看电池健康状态:
{{{
batterygethealth()

返回当前的电池健康状态信息:
1 - 未知;
2 - 良好;
3 - 过热;
4 - 不可用;
5 - 电量过饱;
6 - 查询失败;
}}}

===,,batterygetlevel,,===

{{{
batterygetlevel()

返回电池电量(百分比形式)

需要 api level 5.
}}}

===,,batterygetplugtype,,===
返回充电状态信息
{{{
batterygetplugtype()

返回充电电源信息
-1 - 未知;
0 - 为插入电源;
1 - 交流电源充电;
2 - usb充电
}}}

===,,batterygetstatus,,===
返回充电状态信息
{{{
batterygetstatus()

返回充电状态信息
1 - 未知;
2 - 充电中;
3 - 放电中;
4 - 为充电;
5 - 已充满;
}}}

===,,batterygettechnology,,===

{{{
batterygettechnology()

返回电池技术数据

需要 api level 5.
}}}

===,,batterygettemperature,,===
返回电池温度
{{{
batterygettemperature()

返回当前电池的温度.

需要 api level 5.
}}}

===,,batterygetvoltage,,===
返回电池的电压
{{{
batterygetvoltage()

返回当前电池的电压.

需要 api level 5.
}}}

===,,batterystartmonitoring,,===
开始监视电池状态
{{{
batterystartmonitoring()

开始监视电池状态.

触发 "battery" 事件.
}}}

===,,batterystopmonitoring,,===
停止监视电池状态
{{{
batterystopmonitoring()

停止监视电池状态
}}}

===,,readbatterydata,,===
读取电池记录数据
{{{
readbatterydata()

读取当前记录的电池数据
}}}

===,,bluetoothaccept,,===
监听并接受一个蓝牙连接
{{{
bluetoothaccept(
 string uuid[可选, 默认值为 457807c0-4897-11df-9879-0800200c9a66])

监听并接受一个蓝牙连接。阻塞直到连接建立或者连接失败。

需要 api level 5.
}}}

===,,bluetoothconnect,,===
通过蓝牙与一个移动终端进行连接
{{{
bluetoothconnect(
 string uuid[可选, 默认值为 457807c0-4897-11df-9879-0800200c9a66]: 此处的 uuid  
必须与服务端使用的uuid相匹配,
 string address[可选]: 如果未提供此参数，将会给用户显示一个发现的可连接的移动
终端列表工用户选择。)

通过蓝牙与一个移动终端进行连接。阻塞直到连接建立或者连接失败。

returns:
  连接建立成功则返回true。

需要 api level 5.
}}}

===,,bluetoothgetconnecteddevicename,,===
获取已连接的移动终端的的名称
{{{
bluetoothgetconnecteddevicename()

获取已连接的移动终端的的名称。

需要 api level 5.

}}}

===,,bluetoothmakediscoverable,,===
设置蓝牙为可见状态
{{{
bluetoothmakediscoverable(
 integer duration[可选, 默认 300]: 移动终端蓝牙可见时间,以秒为单位)

设置蓝牙连接在一段时间内为可见状态。

需要 api level 5.
}}}

===,,bluetoothread,,===
读取指定长度的数据
{{{
bluetoothread(
 integer buffersize[可选, 默认为 4096])

读取指定长度的数据，长度由buffersize参数指定。

需要 api level 5.
}}}

===,,bluetoothreadline,,===
读取下一行数据
{{{
bluetoothreadline()

读取下一行数据.

需要 api level 5.

}}}

===,,bluetoothreadready,,===
判断是否全部读取完成
{{{
bluetoothreadready()

还有后续数据可供读取，则返回true。

需要 api level 5.
}}}

===,,bluetoothstop,,===
终端蓝牙连接
{{{
bluetoothstop()

终端蓝牙连接。

需要 api level 5.
}}}

===,,bluetoothwrite,,===
通过当前打开的蓝牙连接传送数据
{{{
bluetoothwrite(
 string bytes)

通过当前打开的蓝牙连接传送数据。

需要 api level 5.
}}}

===,,checkbluetoothstate,,===
检测蓝牙连接的状态
{{{
checkbluetoothstate()

检测蓝牙连接的状态。

returns:
  如果连接已经建立,则返回true。

需要 api level 5.
}}}

===,,togglebluetoothstate,,===
打开或者关闭蓝牙
{{{
togglebluetoothstate(
 boolean enabled[可选],
 boolean prompt[可选, 默认 true]: 是否提示用户当前蓝牙状态已改变)

打开或者关闭蓝牙。

returns:
  如果蓝牙可用，则返回true。

需要 api level 5.
}}}

===,,cameracapturepicture,,===
直接调用镜头并拍照
{{{
cameracapturepicture(
 string path,
 boolean useautofocus[可选, 默认为 true])

拍照并保存到指定的路径。

返回值:
 map形式的列表,键为autofocus和takepicture,值代表是否自动对焦和是否拍摄成功.
}}}

===,,camerainteractivecapturepicture,,===
启动拍照程序拍照并保存到指定位置
{{{
camerainteractivecapturepicture(
 string path)
启动拍照程序拍照并保存到指定位置。
}}}

===,,pick,,===
显示要被uri选取的内容
{{{
pick(
 string uri)
显示要被uri选取的内容（例如 联系人）

returns:
  结果集合，以map形式保存。
}}}
===,,scanbarcode,,===
运行二维码扫描器
{{{
scanbarcode()

运行二维码扫描器。

returns:
  显示结果intent的map集合.

}}}

===,,search,,===
搜索给定的查询字符串
{{{
search(
  string query)

搜索给定的查询字符串。
}}}

===,,view,,===
通过uri运行一个带有view action的activity
{{{
view(
 string uri,
 string type[可选]: mime type/subtype uri的mime类型/子类型,
 jsonobject extras[可选]: intent中要添加额外信息的map集合)

通过uri运行一个带有view action的activity。
}}}

===,,viewcontacts,,===
打开联系人列表
{{{
viewcontacts()

打开联系人列表。
}}}

===,,viewhtml,,===
打开浏览器显示本地的html文件
{{{
viewhtml(
 string path: html 文件的路径)

打开浏览器显示本地的html文件。
}}}

===,,viewmap,,===
打开地图，搜索指定的查询字符串
{{{
viewmap(
 string query,例如 pizza, 123 my street)

打开地图，搜索指定的查询字符串 (例如 pizza, 123 my street)。
}}}

===,,onringersilent,,===
当响铃模式被设置为静音时执行指定脚本
{{{
onringersilent(
 string script: 响铃模式改变时执行脚本的路径。)

当响铃模式被设置为静音时执行指定脚本。
}}}

===,,contactsget,,===
以列表的形式返回所有的联系人
{{{
contactsget(
 jsonarray attributes[可选])

以列表的形式返回所有的联系人。

returns:
 map形式的联系人列表。

}}}

===,,contactsgetattributes,,===
以列表的形式返回所有联系人相关的属性信息
{{{
contactsgetattributes()

以列表的形式返回所有联系人相关的属性信息。
}}}

===,,contactsgetbyid,,===
获取指定id的联系人信息
{{{
contactsgetbyid(
 integer id,
  jsonarray attributes[可选])

获取指定id的联系人信息。
}}}

===,,contactsgetcount,,===
获取联系人总数
{{{
contactsgetcount()

获取联系人总数。
}}}

===,,contactsgetids,,===
返回所有联系人的id
{{{
contactsgetids()

返回所有联系人的id。
}}}

===,,pickcontact,,===
列出所有的联系人供用户选择
{{{
pickcontact()

列出所有的联系人供用户选择。

returns:
  以map的形式返回选中的结果。
}}}

===,,pickphone,,===
列出所有电话号码供用户选
{{{
pickphone()

列出所有电话号码供用户选择。

returns:
  选中的电话号码。
}}}

===,,postevent,,===
向事件列表中添加一个事件
{{{
postevent(
  string name,
  string data)

向事件列表中添加一个事件。
}}}

===,,receiveevent,,===
接受发生的事件
{{{
receiveevent()

接受发生的事件（例如位置或者传感器更新等）并从事件列表中把
它删除(事件列表最多能存放最近触发的1024个事件)。

returns:
  以map的形式返回事件的属性。
}}}

===,,waitforevent,,===
等待（阻塞）直到给定的事件发生。返回的事件不会从缓存中清除
{{{
waitforevent(
 string eventname,
 integer timeout[可选]: 最长等待时间)

等待（阻塞）直到给定的事件发生。返回的事件不会从缓存中清除。

returns:
  以map的形式返回事件的属性。
}}}

===,,geocode,,===
根据指定的坐标返回一些列的地址
{{{
geocode(
 double latitude,
 double longitude,
 integer maxresults[可选, 默认为 1]: 结果的最大数)

根据指定的坐标返回一些列的地址。

returns:
  一系列的地址.
}}}

===,,getlastknownlocation,,===
返回移动终端最新的位置
{{{
getlastknownlocation()

返回移动终端最新的位置。

returns:
  以map的形式返回提供者提供的位置信息。
  
}}}

===,,readlocation,,===
从所有可获得的提供者中返回当前的位置作为指示
{{{
readlocation()

从所有可获得的提供者中返回当前的位置作为指示。

returns:
  以map的形式返回提供者提供的位置信息。
}}}

===,,startlocating,,===
开始收集位置数据
{{{
startlocating(
 integer mindistance[可选，默认是 60000]: 最小的更新时间,单位是毫秒,
 integer minupdatedistance[可选, 默认是 30]:最小的更新距离,单位是米)

开始收集位置数据。
触发"location"事件.
}}}

===,stoplocating,,===
停止获取位置数据
{{{
stoplocating()

停止获取位置数据。
}}}

===,,recordercapturevideo,,===
录制视频（和音频）并把它存放的制定路径
{{{
recordercapturevideo(
 string targetpath,
 double duration[可选],
 boolean recordaudio[可选, 默认是 true])

录制视频（和音频）并把它存放的制定路径。
制定最长录制时间。
如果未指定持续时间参数则方法会立即返回，只有当recorderstop方法被调用或脚本退出时录制才会停止。
除此之外录制会持续duration参数指定的时间。
}}}

===,,recorderstartmicrophone,,===
录音并保存到指定的路径
{{{
recorderstartmicrophone(
 string targetpath)

录音并保存到指定的路径。
}}}

===,,recorderstop,,===
停止一个之前开始的摄像
{{{
recorderstop()

停止一个之前开始的摄像。
}}}

===,,startinteractivevideorecording,,===
运行视频拍摄程序拍摄视频并保存的指定路径
{{{
startinteractivevideorecording(
 string path)

运行视频拍摄程序拍摄视频并保存的指定路径。
}}}

===,,checknetworkroaming,,===
检测当前网络是否处于漫游状态
{{{
checknetworkroaming()

如果当前gsm网络连接处于漫游状态，则返true。
}}}

===,,getcelllocation,,===
返回当前移动终端的位置。
{{{
getcelllocation()

返回当前移动终端的位置。
}}}

===,,getdeviceid,,===
返回当前移动终端的唯一标识
{{{
getdeviceid()

返回当前移动终端的唯一标识,例如gsm网络返回imei码,cdma网络返回meid码。
当移动终端的标识不可获得时，返回null。
}}}

===,,getdevicesoftwareversion,,===
返回移动终端的软件版本
{{{
getdevicesoftwareversion()

返回移动终端的软件版本，例如：gsm手机的imei/sv码。
如果软件版本不可获得，则返回null。 
}}}

===,,getline1number,,===
在一行中返回手机号
{{{
getline1number()

在一行中返回手机号码，例如返回gsm的msisdn号。
如果获取不到则返回null。
}}}

===,,getneighboringcellinfo,,===
返回当前移动终端附近移动终端的信息
{{{
getneighboringcellinfo()

返回当前移动终端附近移动终端的信息。
}}}

===,,getnetworkoperator,,===
返回当前已注册运营商的数值名称
{{{
getnetworkoperator()

返回当前已注册运营商的数值名称（mcc+mnc）（移动国家码+移动网络码）。
}}}

===,,getnetworkoperatorname,,===
返回当前注册运营商的字母名称
{{{
getnetworkoperatorname()

返回当前注册运营商的字母名称。
}}}

===,,getnetworktype,,===
返回移动终端当前使用的无线技术（网络类型）
{{{
getnetworktype()

返回移动终端当前使用的无线技术（网络类型）。
}}}

===,,getphonetype,,===
返回移动终端的类型
{{{
getphonetype()

返回移动终端的类型。
}}}

===,,getsimcountryiso,,===
返回符合iso标注的国家码
{{{
getsimcountryiso()

returns the iso country code equivalent for the sim provider's country code.
返回符合iso标注的国家码，等同于sim卡提供商的国家码
}}}

===,,getsimoperator,,===
返回sim卡提供商的移动国家码和移动网络码组合
{{{
getsimoperator()

返回sim卡提供商的移动国家码和移动网络码组合,是个5或6位的数字。
}}}

===,,getsimoperatorname,,===
返回服务运营商的名称
{{{
getsimoperatorname()

返回服务运营商的名称（spn）
}}}

===,,getsimserialnumber,,===

{{{
getsimserialnumber()
返回sim卡的序列号
返回sim卡的序列号，如果无法获得则返回null。
}}}

===,,getsimstate,,===
返回移动终端
{{{
getsimstate()

返回移动终端。
}}}

===,,getsubscriberid,,===
返回用户唯一标识
{{{
getsubscriberid()

返回用户唯一标识，比如gsm网络的imsi编号。
如果不可获得则返回null。
}}}

===,,getvoicemailalphatag,,===
获取语音信箱号码关联的字母标识
{{{
getvoicemailalphatag()

获取语音信箱号码关联的字母标识。
}}}

===,,getvoicemailnumber,,===
返回语音邮件号码
{{{
getvoicemailnumber()

返回语音邮件号码。如果无法获得则返回null。
}}}

===,,phonecall,,===
通过uri调用一个联系人或电话号码
{{{
phonecall(
  string uri)

通过uri调用一个联系人或电话号码。
}}}

===,,phonecallnumber,,===
拨打一个电话号码
{{{
phonecallnumber(
  string phone number)

拨打一个电话号码。
}}}

===,,phonedial,,===
通过uri拨号
{{{
phonedial(
  string uri)

通过uri拨号
}}}

===,,phonedialnumber,,===
拨打一个电话号码
{{{
phonedialnumber(
  string phone number)

拨打一个电话号码。
}}}

===,,readphonestate,,===
返回当前移动终端状态和打入电话
{{{
readphonestate()

returns the current phone state and incoming number.
返回当前移动终端状态和打入电话
returns:
  以map的形式保存的tate"state" 和 "incomingnumber"
}}}

===,,starttrackingphonestate,,===
开始追踪移动终端状态。
{{{
starttrackingphonestate()

开始追踪移动终端状态。
产生“phone”事件
}}}

===,,stoptrackingphonestate,,===
停止追踪移动终端状态
{{{
stoptrackingphonestate()

停止追踪移动终端状态。
}}}

===,,pulsegeneratorgethz,,===
包装时钟发生器gethz()
{{{
pulsegeneratorgethz()

包装时钟发生器gethz()。
}}}

===,,pulsegeneratorgethzsamples,,===
包装时钟发生器方法gethzsamples()
{{{
pulsegeneratorgethzsamples()

包装时钟发生器方法gethzsamples()。
}}}

===,,pulsegeneratorgetleftpulsems,,===
包装时钟发生器方法getleftpulsems()
{{{
pulsegeneratorgetleftpulsems()

包装时钟发生器方法getleftpulsems()。

}}}

===,,pulsegeneratorgetleftpulsepercent,,===
包装时钟发生器方法getleftpulsepercent()
{{{
pulsegeneratorgetleftpulsepercent()

包装时钟发生器方法getleftpulsepercent()。

}}}

===,,pulsegeneratorgetleftpulsesamples,,===
包装时钟发生器方法getleftpulsesamples()
{{{
pulsegeneratorgetleftpulsesamples()

包装时钟发生器方法getleftpulsesamples()。

}}}

===,,pulsegeneratorgetrightpulsems,,===
包装时钟发生器方法getrightpulsems()
{{{
pulsegeneratorgetrightpulsems()

包装时钟发生器方法getrightpulsems()。
}}}

===,,pulsegeneratorgetrightpulsepercent,,===
包装时钟发生器方法getrightpulsepercent()
{{{
pulsegeneratorgetrightpulsepercent()

包装时钟发生器方法getrightpulsepercent()。
}}}

===,,pulsegeneratorgetrightpulsesamples,,===
包装时钟发生器方法getrightpulsesamples()
{{{
pulsegeneratorgetrightpulsesamples()

包装时钟发生器方法getrightpulsesamples()。
}}}

===,,pulsegeneratorisplaying,,===
包装时钟发生器方法isplaying()
{{{
pulsegeneratorisplaying()

包装时钟发生器方法isplaying()。
}}}

===,,pulsegeneratorrun,,===
包装时钟发生器方法run()
{{{
pulsegeneratorrun()

包装时钟发生器方法run()。
}}}

===,,pulsegeneratorsethzpercent,,===
包装时钟发生器方法sethzpercent()
{{{
pulsegeneratorsethzpercent(
 integer percent)

包装时钟发生器方法sethzpercent()
}}}

===,,pulsegeneratorsetleftpulsepercent,,===
包装时钟发生器方法setleftpulsepercent()
{{{
pulsegeneratorsetleftpulsepercent(
 integer percent)

包装时钟发生器方法setleftpulsepercent()。
}}}

===,,pulsegeneratorsetrightpulsepercent,,===
包装时钟发生器方法setrightpulsepercent()
{{{
pulsegeneratorsetrightpulsepercent(
 integer percent)

包装时钟发生器方法setrightpulsepercent()。
}}}

===,,pulsegeneratorstop,,===
包装时钟发生器方法stop()
{{{
pulsegeneratorstop()

包装时钟发生器方法stop()。
}}}

===,,pulsegeneratortoggleinverted,,===
包装时钟发生器方法toggleinverted()
{{{
pulsegeneratortoggleinverted()

包装时钟发生器方法toggleinverted()。
}}}

===,,pulsegeneratortoggleplayback,,===
包装时钟发生器方法toggleplayback()
{{{
pulsegeneratortoggleplayback()

包装时钟发生器方法toggleplayback()。

}}}

===,,pulsegenteratorsethz,,===
包装时钟发生器方法sethz()
{{{
pulsegenteratorsethz(
  float hz)
包装时钟发生器方法sethz()。
}}}

===,,readsensors,,===
返回当前接受到的传感器信息
{{{
readsensors()

返回当前接受到的传感器信息。
}}}

===,,sensorsgetaccuracy,,===
返回当前接受到的精确值
{{{
sensorsgetaccuracy()

返回当前接收到的精度值。
}}}

===,,sensorsgetlight,,===
返回当前接收到的光度值
{{{
sensorsgetlight()

returns the most recently received light value.
返回当前接收到的光度值。
}}}

===,,sensorsreadaccelerometer,,===
返回最近接收到的加速度值
{{{
sensorsreadaccelerometer()

返回最近接收到的加速度值。

returns:
  以列表形式存放的float值 [(加速度在) x 轴, y 轴, z 轴]。
}}}

===,,sensorsreadmagnetometer,,===
返回最近接收到的引力值
{{{
sensorsreadmagnetometer()

返回当前接收到的引力值。

returns:
 以列表形式存放的float值 [(引力值在) x 轴, y 轴, z 轴]。
}}}

===,,sensorsreadorientation,,===

{{{
sensorsreadorientation()

returns the most recently received orientation values.
返回当前接受到的方向值。

returns:
  以列表形式存放的doubles值 [方位角, 仰角, 转动角度].
}}}

===,,startsensing,,===
开始记录传感器数据供轮询
{{{
startsensing(
 integer samplesize[可选, 默认值为 5]: 求平均值时的样本数)

开始记录传感器数据供轮询。

产生"sensors"事件
}}}

===,,stopsensing,,===
停止收集传感器信息
{{{
stopsensing()

停止收集传感器信息。
}}}

===,,checkairplanemode,,===
检查是否设置了飞行模式
{{{
checkairplanemode()

检查是否设置了飞行模式。

返回值:
  如果打开了飞行模式则返回true。
}}}

===,,checkringersilentmode,,===
检测是否设置了静音模式
{{{
checkringersilentmode()

检测是否设置了静音模式。

返回值:
  如果处于静音模式则返回true。
}}}

===,,checkscreenon,,===
检测当前屏幕是否关闭
{{{
checkscreenon()

检测当前屏幕是否关闭（需要 api level 7支持）

返回:
  如果屏幕打开则返回true
}}}

===,,getmaxmediavolume,,===
返回媒体音量的最大值
{{{
getmaxmediavolume()

返回媒体音量的最大值。
}}}

===,,getmaxringervolume,,===
返回最大的音量值
{{{
getmaxringervolume()

返回铃声的最大音量值。
}}}

===,,getmediavolume,,===

{{{
getmediavolume()

返回当前媒体音量。
}}}

===,,getringervolume,,===
返回当前铃声的音量
{{{
getringervolume()

返回当前铃声的音量。
}}}

===,,getscreenbrightness,,===
返回屏幕的亮度
{{{
getscreenbrightness()

returns the screen backlight brightness.
返回屏幕的亮度。

返回值:
  返回当前的屏幕亮度，范围在 0 到 255之间
}}}

===,,getscreentimeout,,===
返回当前屏幕的超时时间，以秒为单位
{{{
getscreentimeout()

返回当前屏幕的超时时间，以秒为单位。

returns:
  当前超时时间。
}}}

===,,setmediavolume,,===
设置媒体音量
{{{
setmediavolume(
  integer volume)

设置媒体音量。
}}}

===,,setringervolume,,===
设置铃声音量
{{{
setringervolume(
  integer volume)

设置铃声音量。
}}}

===,,setscreenbrightness,,===
设置屏幕的亮度
{{{
setscreenbrightness(
 integer value: 亮度值,范围在 0 到 255之间)

设置屏幕的亮度。

返回值:
  屏幕的原始亮度。
}}}

===,,setscreentimeout,,===
设置屏幕超时关闭时间,以秒为单位
{{{
setscreentimeout(
 integer value)

设置屏幕超时关闭时间,以秒为单位。

返回值:
  屏幕原始的超时时间。
}}}

===,,toggleairplanemode,,===
打开或者关闭飞行模式
{{{
toggleairplanemode(
 boolean enabled[可选])

打开或者关闭飞行模式。

返回值:
  如果处于飞行模式则返回true。
}}}

===,,toggleringersilentmode,,===
设置静音模式
{{{
toggleringersilentmode(
 boolean enabled[可选])

打开或者关闭静音模式。

返回值:
  如果处于静音模式则返回true。
}}}

===,,readsignalstrengths,,===
返回当前的信号强度
{{{
readsignalstrengths()

返回当前的信号强度。

returns:
  以map形式存放的 "gsm_signal_strength"（gsm信号强度）

需要 api level 7.
}}}

===,,starttrackingsignalstrengths,,===
开始监测信号强度
{{{
starttrackingsignalstrengths()

开始监测信号强度。

产生 "signal_strengths"事件。

需要 api level 7.
}}}

===,,stoptrackingsignalstrengths,,===
停止监测信号强度
{{{
stoptrackingsignalstrengths()

停止监测信号强度。

需要 api level 7.
}}}

===,,smsdeletemessage,,===
删除指定的短信息
{{{
smsdeletemessage(
 integer id)

deletes a message.
删除指定的短信息。

returns:
  如果信息被成功删除则返回true
}}}

===,,smsgetattributes,,===
返回所有可能的信息属性
{{{
smsgetattributes()

返回所有可能的信息属性。
}}}

===,,smsgetmessagebyid,,===
返回指定信息的属性
{{{
smsgetmessagebyid(
 integer id: message id,
 jsonarray attributes[可选])

返回指定信息的属性。
}}}

===,,smsgetmessagecount,,===
返回短信息的数目
{{{
smsgetmessagecount(
 boolean unreadonly,
 string folder[可选, 默认为 inbox（收件箱）])

返回短信息的数目。
}}}

===,,smsgetmessageids,,===
返回所有信息的id
{{{
smsgetmessageids(
 boolean unreadonly,
 string folder[可选, 默认为 inbox（收件箱）])

返回所有信息的id。
}}}

===,,smsgetmessages,,===

{{{
smsgetmessages(
 boolean unreadonly,
 string folder[可选, 默认为 inbox（收件箱）],
 jsonarray attributes[可选])

返回所有信息的列表

返回值:
  以map形式存放的信息列表
}}}

===,,smsgetmessages,,===

{{{
smsmarkmessageread(
 jsonarray ids: 要标记为已读的短信息id列表。
 boolean read)

将短信息标记为已读。

返回值:
  被标记为已读的信息的数字。
}}}

===,,smssend,,===
发送一条短信
{{{
smssend(
 string destinationaddress: 例如一个手机号码,
 string text)

发送一条短信。
}}}

===,,recognizespeech,,===
识别用户的语音返回最相似的结果
{{{
recognizespeech(
 string prompt[可选]: 要求用户阅读时显示的提示信息,
 string language[可选]: 重新设置识别器期望的语言,
这个语言要不同于java.util.locale.getdefault()设置的语言,
 string languagemodel[可选]: 指定识别器使用哪种语音模式
(浏览 android.speech.recognizeintent了解更多))

识别用户的语音返回最相似的结果。

returns:
  如果内容不能识别则返回一个空串。
}}}

===,,ttsisspeaking,,===
如果当前正处于tts阅读状态则返回true
{{{
ttsisspeaking()

如果当前正处于tts阅读状态则返回true

需要 api level 4.
}}}

===,,ttsspeak,,===
通过tts读出给定的信息
{{{
ttsspeak(
  string message)

通过tts读出给定的信息。

需要 api level 4.
}}}

===,,generatedtmftones,,===
为指定的电话号码合成dtmf发音
{{{
generatedtmftones(
 string phonenumber,
 integer toneduration[可选, 默认为 100]: 每次发音之间的时间间隔)

为指定的电话号码合成dtmf发音。
}}}

===,,addcontextmenuitem,,===
向上下文菜单添加新项
{{{
addcontextmenuitem(
 string label: 菜单项的标签,
 string event: 菜单点击时触发的事件,
 object eventdata[可选])

向上下文菜单添加新项。
}}}

===,,addoptionsmenuitem,,===

{{{
addoptionsmenuitem(
 string label: 菜单项的标签,
 string event: 菜单点击时触发的事件,
 object eventdata[可选],
 string iconname[可选]: android系统自带菜单图标,
浏览http://developer.android.com/reference/android/r.drawable.html了解更多。)

向选择菜单添加新项。
}}}

===,,clearcontextmenu,,===
移除此前添加的所有上下文菜单
{{{
clearcontextmenu()

移除此前添加的所有上下文菜单。
}}}

===,,clearoptionsmenu,,===
移除此前添加的所有选项菜单
{{{
clearoptionsmenu()

移除此前添加的所有选项菜单。
}}}

===,,dialogcreatealert,,===
创建警告窗口
{{{
dialogcreatealert(
 string title[可选],
  string message[可选])

创建警告窗口。
}}}

===,,dialogcreatedatepicker,,===
创建日期选择窗口
{{{
dialogcreatedatepicker(
 integer year[可选,默认值为 1970],
 integer month[可选, 默认值为 1],
 integer day[可选, 默认值为 1])

创建日期选择窗口。
}}}

===,,dialogcreatehorizontalprogress,,===
创建一个水平滚动对话框
{{{
dialogcreatehorizontalprogress(
 string title[可选],
 string message[可选],
 integer maximum progress[可选, 默认值为 100])

创建一个水平滚动对话框。
}}}

===,,dialogcreateinput,,===
创建一个输入对话框
{{{
dialogcreateinput(
 string title[可选, 默认值为 value]: 输入框的标题,
 string message[可选, 默认值为 please enter value:]: 输入框的上方的提示信息,
 string defaulttext[optional]: 输入框里的默认值)

创建一个输入对话框。
}}}

===,,dialogcreatepassword,,===
创建一个密码输入框
{{{
dialogcreatepassword(
 string title[可选, 默认值为 password]: 输入框的标题,
 string message[可选, 默认值为 please enter password:]:输入框上方显示的值)

创建一个密码输入框。
}}}

===,,dialogcreateseekbar,,===
创建一个搜索条对话框
{{{
dialogcreateseekbar(
 integer starting value[可选, 默认值为 50],
 integer maximum value[可选, 默认值为 100],
 string title,
  string message)

创建一个滑动条对话框。
}}}

===,,dialogcreatespinnerprogress,,===
创建一个等待完成对话框
{{{
dialogcreatespinnerprogress(
 string title[可选],
 string message[可选],
 integer maximum progress[可选, 默认值为 100])

创建一个等待完成对话框（旋转的圆圈）。
}}}

===,,dialogcreatetimepicker,,===
创建一个时间选择窗口
{{{
dialogcreatetimepicker(
 integer hour[可选, 默认值为 0],
 integer minute[可选, 默认值为 0],
 boolean is24hour[可选, 默认值为 false]:使用24小时计时制)

创建一个时间选择窗口。
}}}

===,,dialogdismiss,,===
关闭对话框
{{{
dialogdismiss()

关闭对话框。
}}}

===,,dialoggetinput,,===
请求用户输入信息
{{{
dialoggetinput(
 string title[可选, 默认值为 value]:输入框的标题,
 string message[可选, 默认值为 please enter value:]: 输入框上的提示信息
 string defaulttext[可选]: 输入框内的提示信息)

请求用户输入信息。
}}}

===,,dialoggetpassword,,===
请求用户输入密码
{{{
dialoggetpassword(
 string title[可选, 默认为 password]: 密码框的标题,
 string message[可选, 默认为 please enter password:]: 密码框上方的提示信息)

请求用户输入密码。
}}}

===,,dialoggetresponse,,===
返回对话框的响应信息
{{{
dialoggetresponse()

返回对话框的响应信息。
}}}

===,,dialoggetselecteditems,,===
该方法返回用户选中的列表项
{{{
dialoggetselecteditems()

该方法返回用户选中的列表项。

返回值:
  选中的项目。
}}}

===,,dialogsetcurrentprogress,,===
设置进度条的当前值
{{{
dialogsetcurrentprogress(
 integer current)

设置进度条的当前值。

}}}

===,,dialogsetitems,,===
设计警告窗口的列表条目
{{{
dialogsetitems(
  jsonarray items)

设计警告窗口的列表条目。
}}}

===,,dialogsetmax设计进度条的最大值progress,,===
设置进度条的最大值
{{{
dialogsetmaxprogress(
  integer max)

设置进度条的最大值。
}}}

===,,dialogsetmultichoiceitems,,===
设置对话框为多选并选中指定项
{{{
dialogsetmultichoiceitems(
 jsonarray items,
 jsonarray selected[可选]: 选中项目的列表)

设置对话框为多选并选中指定项。
}}}

===,,dialogsetnegativebuttontext,,===
设置弹出窗口的按钮文字
{{{
dialogsetnegativebuttontext(
  string text)

设置弹出窗口中的否定按钮文字。
}}}

===,,dialogsetneutralbuttontext,,===
设置弹出窗口中的中立按钮文字
{{{
dialogsetneutralbuttontext(
  string text)

设置弹出窗口的按钮文字。
}}}

===,,dialogsetpositivebuttontext,,===
设置弹出窗口中肯定按钮的文字
{{{
dialogsetpositivebuttontext(
 string text)

设置弹出窗口中肯定按钮的文字。
}}}

===,,dialogsetsinglechoiceitems,,===

{{{
dialogsetsinglechoiceitems(
 jsonarray items,
 integer selected[optional, default 0]: selected item index)

set dialog single choice items and selected item.
设置对话框中单选选项列表和选中项。
}}}

===,,dialogshow,,===
显示对话框
{{{
dialogshow()

显示对话框。
}}}

===,,webviewshow,,===
浏览指定的url页面
{{{
webviewshow(
 string url,
 boolean wait[可选]: 阻断知道用户推出浏览页面)

浏览指定的url页面。
}}}