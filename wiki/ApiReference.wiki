#summary 中文版API

*!ActivityResultFacade*
 * [#setResultBoolean setResultBoolean]
 * [#setResultBooleanArray setResultBooleanArray]
 * [#setResultByte setResultByte]
 * [#setResultByteArray setResultByteArray]
 * [#setResultChar setResultChar]
 * [#setResultCharArray setResultCharArray]
 * [#setResultDouble setResultDouble]
 * [#setResultDoubleArray setResultDoubleArray]
 * [#setResultFloat setResultFloat]
 * [#setResultFloatArray setResultFloatArray]
 * [#setResultInteger setResultInteger]
 * [#setResultIntegerArray setResultIntegerArray]
 * [#setResultLong setResultLong]
 * [#setResultLongArray setResultLongArray]
 * [#setResultSerializable setResultSerializable]
 * [#setResultShort setResultShort]
 * [#setResultShortArray setResultShortArray]
 * [#setResultString setResultString]
 * [#setResultStringArray setResultStringArray]
*!AlarmManagerFacade*
 * [#cancelRepeating cancelRepeating]
 * [#scheduleAbsolute scheduleAbsolute]
 * [#scheduleInexactRepeating scheduleInexactRepeating]
 * [#scheduleRelative scheduleRelative]
 * [#scheduleRepeating scheduleRepeating]
*!AndroidFacade*
 * [#getClipboard getClipboard]
 * [#getInput getInput]
 * [#getIntent getIntent]
 * [#getPackageVersion getPackageVersion]
 * [#getPackageVersionCode getPackageVersionCode]
 * [#getPassword getPassword]
 * [#log log]
 * [#makeToast makeToast]
 * [#notify notify]
 * [#requiredVersion requiredVersion]
 * [#sendEmail sendEmail]
 * [#setClipboard setClipboard]
 * [#startActivity startActivity]
 * [#startActivityForResult startActivityForResult]
 * [#vibrate vibrate]
*!ApplicationManagerFacade*
 * [#forceStopPackage forceStopPackage]
 * [#getLaunchableApplications getLaunchableApplications]
 * [#getRunningPackages getRunningPackages]
 * [#launch launch]
*!BatteryManagerFacade*
 * [#batteryCheckPresent batteryCheckPresent]
 * [#batteryGetHealth batteryGetHealth]
 * [#batteryGetLevel batteryGetLevel]
 * [#batteryGetPlugType batteryGetPlugType]
 * [#batteryGetStatus batteryGetStatus]
 * [#batteryGetTechnology batteryGetTechnology]
 * [#batteryGetTemperature batteryGetTemperature]
 * [#batteryGetVoltage batteryGetVoltage]
 * [#batteryStartMonitoring batteryStartMonitoring]
 * [#batteryStopMonitoring batteryStopMonitoring]
 * [#readBatteryData readBatteryData]
*!BluetoothFacade*
 * [#bluetoothAccept bluetoothAccept]
 * [#bluetoothConnect bluetoothConnect]
 * [#bluetoothGetConnectedDeviceName bluetoothGetConnectedDeviceName]
 * [#bluetoothMakeDiscoverable bluetoothMakeDiscoverable]
 * [#bluetoothRead bluetoothRead]
 * [#bluetoothReadLine bluetoothReadLine]
 * [#bluetoothReadReady bluetoothReadReady]
 * [#bluetoothStop bluetoothStop]
 * [#bluetoothWrite bluetoothWrite]
 * [#checkBluetoothState checkBluetoothState]
 * [#toggleBluetoothState toggleBluetoothState]
*!CameraFacade*
 * [#cameraCapturePicture cameraCapturePicture]
 * [#cameraInteractiveCapturePicture cameraInteractiveCapturePicture]
*!CommonIntentsFacade*
 * [#pick pick]
 * [#scanBarcode scanBarcode]
 * [#search search]
 * [#view view]
 * [#viewContacts viewContacts]
 * [#viewHtml viewHtml]
 * [#viewMap viewMap]
*!ConditionManagerFacade*
 * [#onRingerSilent onRingerSilent]
*!ContactsFacade*
 * [#contactsGet contactsGet]
 * [#contactsGetAttributes contactsGetAttributes]
 * [#contactsGetById contactsGetById]
 * [#contactsGetCount contactsGetCount]
 * [#contactsGetIds contactsGetIds]
 * [#pickContact pickContact]
 * [#pickPhone pickPhone]
*!EventFacade*
 * [#postEvent postEvent]
 * [#receiveEvent receiveEvent]
 * [#waitForEvent waitForEvent]
*!LocationFacade*
 * [#geocode geocode]
 * [#getLastKnownLocation getLastKnownLocation]
 * [#readLocation readLocation]
 * [#startLocating startLocating]
 * [#stopLocating stopLocating]
*!MediaRecorderFacade*
 * [#recorderCaptureVideo recorderCaptureVideo]
 * [#recorderStartMicrophone recorderStartMicrophone]
 * [#recorderStop recorderStop]
 * [#startInteractiveVideoRecording startInteractiveVideoRecording]
*!PhoneFacade*
 * [#checkNetworkRoaming checkNetworkRoaming]
 * [#getCellLocation getCellLocation]
 * [#getDeviceId getDeviceId]
 * [#getDeviceSoftwareVersion getDeviceSoftwareVersion]
 * [#getLine1Number getLine1Number]
 * [#getNeighboringCellInfo getNeighboringCellInfo]
 * [#getNetworkOperator getNetworkOperator]
 * [#getNetworkOperatorName getNetworkOperatorName]
 * [#getNetworkType getNetworkType]
 * [#getPhoneType getPhoneType]
 * [#getSimCountryIso getSimCountryIso]
 * [#getSimOperator getSimOperator]
 * [#getSimOperatorName getSimOperatorName]
 * [#getSimSerialNumber getSimSerialNumber]
 * [#getSimState getSimState]
 * [#getSubscriberId getSubscriberId]
 * [#getVoiceMailAlphaTag getVoiceMailAlphaTag]
 * [#getVoiceMailNumber getVoiceMailNumber]
 * [#phoneCall phoneCall]
 * [#phoneCallNumber phoneCallNumber]
 * [#phoneDial phoneDial]
 * [#phoneDialNumber phoneDialNumber]
 * [#readPhoneState readPhoneState]
 * [#startTrackingPhoneState startTrackingPhoneState]
 * [#stopTrackingPhoneState stopTrackingPhoneState]
*!PulseGeneratorFacade*
 * [#pulseGeneratorGetHz pulseGeneratorGetHz]
 * [#pulseGeneratorGetHzSamples pulseGeneratorGetHzSamples]
 * [#pulseGeneratorGetLeftPulseMs pulseGeneratorGetLeftPulseMs]
 * [#pulseGeneratorGetLeftPulsePercent pulseGeneratorGetLeftPulsePercent]
 * [#pulseGeneratorGetLeftPulseSamples pulseGeneratorGetLeftPulseSamples]
 * [#pulseGeneratorGetRightPulseMs pulseGeneratorGetRightPulseMs]
 * [#pulseGeneratorGetRightPulsePercent pulseGeneratorGetRightPulsePercent]
 * [#pulseGeneratorGetRightPulseSamples pulseGeneratorGetRightPulseSamples]
 * [#pulseGeneratorIsPlaying pulseGeneratorIsPlaying]
 * [#pulseGeneratorRun pulseGeneratorRun]
 * [#pulseGeneratorSetHzPercent pulseGeneratorSetHzPercent]
 * [#pulseGeneratorSetLeftPulsePercent pulseGeneratorSetLeftPulsePercent]
 * [#pulseGeneratorSetRightPulsePercent pulseGeneratorSetRightPulsePercent]
 * [#pulseGeneratorStop pulseGeneratorStop]
 * [#pulseGeneratorToggleInverted pulseGeneratorToggleInverted]
 * [#pulseGeneratorTogglePlayback pulseGeneratorTogglePlayback]
 * [#pulseGenteratorSetHz pulseGenteratorSetHz]
*!SensorManagerFacade*
 * [#readSensors readSensors]
 * [#sensorsGetAccuracy sensorsGetAccuracy]
 * [#sensorsGetLight sensorsGetLight]
 * [#sensorsReadAccelerometer sensorsReadAccelerometer]
 * [#sensorsReadMagnetometer sensorsReadMagnetometer]
 * [#sensorsReadOrientation sensorsReadOrientation]
 * [#startSensing startSensing]
 * [#stopSensing stopSensing]
*!SettingsFacade*
 * [#checkAirplaneMode checkAirplaneMode]
 * [#checkRingerSilentMode checkRingerSilentMode]
 * [#checkScreenOn checkScreenOn]
 * [#getMaxMediaVolume getMaxMediaVolume]
 * [#getMaxRingerVolume getMaxRingerVolume]
 * [#getMediaVolume getMediaVolume]
 * [#getRingerVolume getRingerVolume]
 * [#getScreenBrightness getScreenBrightness]
 * [#getScreenTimeout getScreenTimeout]
 * [#setMediaVolume setMediaVolume]
 * [#setRingerVolume setRingerVolume]
 * [#setScreenBrightness setScreenBrightness]
 * [#setScreenTimeout setScreenTimeout]
 * [#toggleAirplaneMode toggleAirplaneMode]
 * [#toggleRingerSilentMode toggleRingerSilentMode]

===,,setResultBoolean,,===
设置脚本被startActivityForResult()方法调用后返回的布尔值:
{{{
setResultBoolean(
 Integer resultCode:回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Boolean resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultBooleanArray,,===
设置脚本被startActivityForResult()方法调用后返回的布尔值数组:
{{{
setResultBoolean(
 Integer resultCode:回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Boolean[] resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultByte,,===
设置脚本被startActivityForResult()方法调用后返回的字节:
{{{
setResultByte(
 Integer resultCode:回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Byte resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultByteArray,,===
设置脚本被startActivityForResult()方法调用后返回的字节数组:
{{{
setResultByteArray(
 Integer resultCode:回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Byte[] resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultChar,,===
设置脚本被startActivityForResult()方法调用后返回的字符:
{{{
setResultChar(
 Integer resultCode:回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Character resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultCharArray,,===
设置脚本被startActivityForResult()方法调用后返回的字符数组:
{{{
setResultCharArray(
 Integer resultCode:回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Character[] resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultDouble,,===
设置脚本被startActivityForResult()方法调用后返回的的双精度浮点数值:
{{{
setResultDouble(
 Integer resultCode:回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Double resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultDoubleArray,,===
设置脚本被startActivityForResult()方法调用后返回的双精度浮点数值数组:
{{{
setResultDoubleArray(
 Integer resultCode:回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Double[] resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultFloat,,===
设置脚本被startActivityForResult()方法调用后返回的的单精度浮点数值:
{{{
setResultFloat(
 Integer resultCode: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Float resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultFloatArray,,===
设置脚本被startActivityForResult()方法调用后返回的单精度浮点型数组:
{{{
setResultFloatArray(
 Integer resultCode: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Float[] resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultInteger,,===
设置脚本被startActivityForResult()方法调用后返回的整数:
{{{
setResultInteger(
 Integer resultCode: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Integer resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultIntegerArray,,===
设置脚本被startActivityForResult()方法调用后返回的整型数组:
{{{
setResultIntegerArray(
 Integer resultCode: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Integer[] resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultLong,,===
设置脚本被startActivityForResult()方法调用后返回的长整数:
{{{
setResultLong(
 Integer resultCode: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Long resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultLongArray,,===
设置脚本被startActivityForResult()方法调用后返回的长整型数组:
{{{
setResultLongArray(
 Integer resultCode: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Long[] resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultSerializable,,===
设置脚本被startActivityForResult()方法调用后返回的可串行化的结果(Serializable):
{{{
setResultSerializable(
 Integer resultCode: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Serializable resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultShort,,===
设置脚本被startActivityForResult()方法调用后返回的短整数:
{{{
setResultShort(
 Integer resultCode:: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Short resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultShortArray,,===
设置脚本被startActivityForResult()方法调用后返回的短整型数组:
{{{
setResultShortArray(
 Integer resultCode:: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 Short[] resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultString,,===
设置脚本被startActivityForResult()方法调用后返回的字符串:
{{{
setResultString(
 Integer resultCode: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 String resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,setResultStringArray,,===
设置脚本被startActivityForResult()方法调用后返回的字符串数组:
{{{
setResultStringArray(
 Integer resultCode: 回传给原始activity的结果编码, 
常常是RESULT_CANCELED(0) 或者 RESULT_OK(-1),
 String[] resultValue)

设置脚本执行的结果.每当脚本程序被startActivityForResult()
方法调用时,由此产生的intent将会包含SCRIPT_RESULT和给定的值.
}}}

===,,cancelRepeating,,===
取消脚本的定时执行计划:
{{{
cancelRepeating(
 String script)

取消给定脚本所有的定时(重复)执行计划
}}}

===,,scheduleAbsolute,,===
定时执行传入的脚本，从开机后开始计时：
{{{
scheduleAbsolute(
 String script: 要执行的脚本,
 Double time: 脚本延迟执行时间, 开机(epoch?)后延迟一定时间执行脚本,延迟的时间由此参数指定
 Boolean wakeup[optional, default true]: 是否唤醒处于黑屏状态的移动设备)

定时执行传入的脚本,从开机后开始计时
}}}

===,,scheduleInexactRepeating,,===
每隔一段端时间执行一次脚本（时间间隔不太精确）
{{{
scheduleInexactRepeating(
 Double interval: 两次执行之间的时间间隔,以秒为单位
 String script: 要执行的脚本,
 Boolean wakeup[optional, default true]: 是否唤醒处于黑屏状态的移动设备)

从脚本被调用开始,每隔一段时间执行一次脚本(不是很精确),但是比scheduleRepeating方法省电
}}}

===,,scheduleRelative,,===
定时执行脚本,延迟时间从方法被调用时开始计算
{{{
scheduleRelative(
 String script: 要执行的脚本,
 Double secondsFromNow: 从现在起,延迟一定时间执行脚本,延迟时间由此参数指定
 Boolean wakeup[optional, default true]: 是否唤醒处于黑屏状态的移动设备)

从脚本被调用开始，延迟数秒钟后执行脚
}}}

===,,scheduleRepeating,,===
每隔一段时间执行一次脚本（精确）
{{{
scheduleRepeating(
 Double interval: 两次执行之间的时间间隔,以秒为单位
 String script: 要执行的脚本,
 Double firstExecutionTime[optional]: 第一次执行脚本所需要延迟的时间,从开机(epoch?)开始计算
 Boolean wakeup[optional, default true]:是否唤醒处于黑屏状态的移动设备)

每隔一段时间执行一次脚本,从开机开始计算
}}}

===,,getClipboard,,===
读取剪贴板中的文本
{{{
getClipboard()

从剪贴板中读取文本。

返回值:
  剪贴板中的文本。
}}}

===,,getInput,,===
请求用户输入文本
{{{
getInput(
 String title[可选, 默认为 SL4A Inpu]: 输入框的标题
 String message[k可选, 默认为 Please enter value:]: 输入框的提示信息)

请求用户输入文本信息

已废弃，请使用dialogGetInput方法替代。
}}}

===,,getIntent,,===
获取启动脚本的Intent
{{{
getIntent()

返回启动脚本的Intent
}}}

===,,getPackageVersion,,===
返回包的版本名
{{{
getPackageVersion(
  String packageName)

返回包的版本名
}}}

===,,getPackageVersionCode,,===
返回包的版本号
{{{
getPackageVersionCode(
  String packageName)

返回包的版本号
}}}

===,,getPassword,,===
请求用户输入密码
{{{
getPassword(
 String title[optional, default SL4A Password Input]: title of the input box,
 String message[optional, default Please enter password:]: message to display   
above the input box)

请求用户输入密码。

已废弃!请使用dialogGetPassword方法替代。
}}}

===,,log,,===
写日志
{{{
log(
  String message)

向logcat中写入信息。
}}}

===,,makeToast,,===
显示短暂提示框
{{{
makeToast(
  String message)

显示一个持续短暂时间的提示框。
}}}

===,,notify,,===
通知
{{{
notify(
 String title: 标题,
 String message)

显示一个通知，在用户点击后会取消。
}}}

===,,requiredVersion,,===
检测版本信息
{{{
requiredVersion(
 Integer requiredVersion)

检测当前SL4A的版本是否大于制定的版本。
}}}

===,,sendEmail,,===
发邮件
{{{
sendEmail(
 String to: 一系列的收件人列表，用逗号分隔。
 String subject,
 String body,
 String attachmentUri[可选])

启动一个发送邮件的activity，将内容发送给接收者。
}}}

===,,setClipboard,,===
向剪贴板写入信息
{{{
setClipboard(
  String text)

向剪贴板写入信息。
}}}

===,,startActivity,,===
启动一个Activity
{{{
startActivity(
 String action,
 String uri[可选],
 String type[k可选]: URI的MIME类型/子类型,
 JSONObject extras[可选]: 要添加到Intent的附加数据，以map形式保存,
 Boolean wait[可选]: 阻塞当前应用知道打开的Activity被关闭)

启动一个Activity
}}}

===,,startActivityForResult,,===
运行一个Activity并返回结果
{{{
startActivityForResult(
 String action,
 String uri[可选],
 String type[可选]: URI的MIME类型/子类型,
 JSONObject extras[可选]: 要添加到Intent的附加数据，以map形式保存)

运行一个Activity并返回结果
返回:
  最终的intent,以map形式呈现
}}}

===,,vibrate,,===
震动
{{{
vibrate(
 Integer duration[可选, 默认为 300]: 持续时间,以毫秒为单位)

使手机震动指定的时间。
}}}

===,,forceStopPackage,,===
强制终止一个包
{{{
forceStopPackage(
 String packageName: 包名)

强制终止一个包。
}}}

===,,getLaunchableApplications,,===
获得可运行的应用
{{{
getLaunchableApplications()

返回一个可以运行的应用类名列表
}}}

===,,getRunningPackages,,===
返回正在运行的activity或者服务的列表
{{{
getRunningPackages()

返回一个正在运行的activity或者服务的列表。

返回:
  一个正在运行activity的列表。
}}}

===,,launch,,===
启动一个Activity
{{{
launch(
  String className)

按照给定的类名启动一个Activity。
}}}

===,,batteryCheckPresent,,===
查看电池电量信息:
{{{
batteryCheckPresent()

返回当前的电池电量信息
需要 API Level 5.
}}}

===,,batteryGetHealth,,===
查看电池健康状态:
{{{
batteryGetHealth()

返回当前的电池健康状态信息:
1 - 未知;
2 - 良好;
3 - 过热;
4 - 不可用;
5 - 电量过饱;
6 - 查询失败;
}}}

===,,batteryGetLevel,,===

{{{
batteryGetLevel()

返回电池电量(百分比形式)

需要 API Level 5.
}}}

===,,batteryGetPlugType,,===
返回充电状态信息
{{{
batteryGetPlugType()

返回充电电源信息
-1 - 未知;
0 - 为插入电源;
1 - 交流电源充电;
2 - usb充电
}}}

===,,batteryGetStatus,,===
返回充电状态信息
{{{
batteryGetStatus()

返回充电状态信息
1 - 未知;
2 - 充电中;
3 - 放电中;
4 - 为充电;
5 - 已充满;
}}}

===,,batteryGetTechnology,,===

{{{
batteryGetTechnology()

返回电池技术数据

需要 API Level 5.
}}}

===,,batteryGetTemperature,,===
返回电池温度
{{{
batteryGetTemperature()

返回当前电池的温度.

需要 API Level 5.
}}}

===,,batteryGetVoltage,,===
返回电池的电压
{{{
batteryGetVoltage()

返回当前电池的电压.

需要 API Level 5.
}}}

===,,batteryStartMonitoring,,===
开始监视电池状态
{{{
batteryStartMonitoring()

开始监视电池状态.

触发 "battery" 事件.
}}}

===,,batteryStopMonitoring,,===
停止监视电池状态
{{{
batteryStopMonitoring()

停止监视电池状态
}}}

===,,readBatteryData,,===
读取电池记录数据
{{{
readBatteryData()

读取当前记录的电池数据
}}}

===,,bluetoothAccept,,===
监听并接受一个蓝牙连接
{{{
bluetoothAccept(
 String uuid[可选, 默认值为 457807c0-4897-11df-9879-0800200c9a66])

监听并接受一个蓝牙连接。阻塞直到连接建立或者连接失败。

需要 API Level 5.
}}}

===,,bluetoothConnect,,===
通过蓝牙与一个移动终端进行连接
{{{
bluetoothConnect(
 String uuid[可选, 默认值为 457807c0-4897-11df-9879-0800200c9a66]: 此处的 UUID  
必须与服务端使用的UUID相匹配,
 String address[可选]: 如果未提供此参数，将会给用户显示一个发现的可连接的移动
终端列表工用户选择。)

通过蓝牙与一个移动终端进行连接。阻塞直到连接建立或者连接失败。

Returns:
  连接建立成功则返回True。

需要 API Level 5.
}}}

===,,bluetoothGetConnectedDeviceName,,===
获取已连接的移动终端的的名称
{{{
bluetoothGetConnectedDeviceName()

获取已连接的移动终端的的名称。

需要 API Level 5.

}}}

===,,bluetoothMakeDiscoverable,,===
设置蓝牙为可见状态
{{{
bluetoothMakeDiscoverable(
 Integer duration[可选, 默认 300]: 移动终端蓝牙可见时间,以秒为单位)

设置蓝牙连接在一段时间内为可见状态。

需要 API Level 5.
}}}

===,,bluetoothRead,,===
读取指定长度的数据
{{{
bluetoothRead(
 Integer bufferSize[可选, 默认为 4096])

读取指定长度的数据，长度由bufferSize参数指定。

需要 API Level 5.
}}}

===,,bluetoothReadLine,,===
读取下一行数据
{{{
bluetoothReadLine()

读取下一行数据.

需要 API Level 5.

}}}

===,,bluetoothReadReady,,===
判断是否全部读取完成
{{{
bluetoothReadReady()

还有后续数据可供读取，则返回True。

需要 API Level 5.
}}}

===,,bluetoothStop,,===
终端蓝牙连接
{{{
bluetoothStop()

终端蓝牙连接。

需要 API Level 5.
}}}

===,,bluetoothWrite,,===
通过当前打开的蓝牙连接传送数据
{{{
bluetoothWrite(
 String bytes)

通过当前打开的蓝牙连接传送数据。

需要 API Level 5.
}}}

===,,checkBluetoothState,,===
检测蓝牙连接的状态
{{{
checkBluetoothState()

检测蓝牙连接的状态。

Returns:
  如果连接已经建立,则返回True。

需要 API Level 5.
}}}

===,,toggleBluetoothState,,===
打开或者关闭蓝牙
{{{
toggleBluetoothState(
 Boolean enabled[可选],
 Boolean prompt[可选, 默认 true]: 是否提示用户当前蓝牙状态已改变)

打开或者关闭蓝牙。

Returns:
  如果蓝牙可用，则返回True。

需要 API Level 5.
}}}

===,,cameraCapturePicture,,===
直接调用镜头并拍照
{{{
cameraCapturePicture(
 String path,
 Boolean useAutoFocus[可选, 默认为 true])

拍照并保存到指定的路径。

返回值:
 map形式的列表,键为autoFocus和takePicture,值代表是否自动对焦和是否拍摄成功.
}}}

===,,cameraInteractiveCapturePicture,,===
启动拍照程序拍照并保存到指定位置
{{{
cameraInteractiveCapturePicture(
 String path)
启动拍照程序拍照并保存到指定位置。
}}}

===,,pick,,===
显示要被URI选取的内容
{{{
pick(
 String uri)
显示要被URI选取的内容（例如 联系人）

Returns:
  结果集合，以map形式保存。
}}}
===,,scanBarcode,,===
运行二维码扫描器
{{{
scanBarcode()

运行二维码扫描器。

Returns:
  显示结果Intent的map集合.

}}}

===,,search,,===
搜索给定的查询字符串
{{{
search(
  String query)

搜索给定的查询字符串。
}}}

===,,view,,===
通过URI运行一个带有view action的activity
{{{
view(
 String uri,
 String type[可选]: MIME type/subtype URI的MIME类型/子类型,
 JSONObject extras[可选]: Intent中要添加额外信息的map集合)

通过URI运行一个带有view action的activity。
}}}

===,,viewContacts,,===
打开联系人列表
{{{
viewContacts()

打开联系人列表。
}}}

===,,viewHtml,,===
打开浏览器显示本地的HTML文件
{{{
viewHtml(
 String path: HTML 文件的路径)

打开浏览器显示本地的HTML文件。
}}}

===,,viewMap,,===
打开地图，搜索指定的查询字符串
{{{
viewMap(
 String query,例如 pizza, 123 My Street)

打开地图，搜索指定的查询字符串 (例如 pizza, 123 My Street)。
}}}

===,,onRingerSilent,,===
当响铃模式被设置为静音时执行指定脚本
{{{
onRingerSilent(
 String script: 响铃模式改变时执行脚本的路径。)

当响铃模式被设置为静音时执行指定脚本。
}}}

===,,contactsGet,,===
以列表的形式返回所有的联系人
{{{
contactsGet(
 JSONArray attributes[可选])

以列表的形式返回所有的联系人。

Returns:
 map形式的联系人列表。

}}}

===,,contactsGetAttributes,,===
以列表的形式返回所有联系人相关的属性信息
{{{
contactsGetAttributes()

以列表的形式返回所有联系人相关的属性信息。
}}}

===,,contactsGetById,,===
获取指定Id的联系人信息
{{{
contactsGetById(
 Integer id,
  JSONArray attributes[可选])

获取指定Id的联系人信息。
}}}

===,,contactsGetCount,,===
获取联系人总数
{{{
contactsGetCount()

获取联系人总数。
}}}

===,,contactsGetIds,,===
返回所有联系人的Id
{{{
contactsGetIds()

返回所有联系人的Id。
}}}

===,,pickContact,,===
列出所有的联系人供用户选择
{{{
pickContact()

列出所有的联系人供用户选择。

Returns:
  以map的形式返回选中的结果。
}}}

===,,pickPhone,,===
列出所有电话号码供用户选
{{{
pickPhone()

列出所有电话号码供用户选择。

Returns:
  选中的电话号码。
}}}

===,,postEvent,,===
向事件列表中添加一个事件
{{{
postEvent(
  String name,
  String data)

向事件列表中添加一个事件。
}}}

===,,receiveEvent,,===
接受发生的事件
{{{
receiveEvent()

接受发生的事件（例如位置或者传感器更新等）并从事件列表中把
它删除(事件列表最多能存放最近触发的1024个事件)。

Returns:
  以Map的形式返回事件的属性。
}}}

===,,waitForEvent,,===
等待（阻塞）直到给定的事件发生。返回的事件不会从缓存中清除
{{{
waitForEvent(
 String eventName,
 Integer timeout[可选]: 最长等待时间)

等待（阻塞）直到给定的事件发生。返回的事件不会从缓存中清除。

Returns:
  以Map的形式返回事件的属性。
}}}

===,,geocode,,===
根据指定的坐标返回一些列的地址
{{{
geocode(
 Double latitude,
 Double longitude,
 Integer maxResults[可选, 默认为 1]: 结果的最大数)

根据指定的坐标返回一些列的地址。

Returns:
  一系列的地址.
}}}

===,,getLastKnownLocation,,===
返回移动终端最新的位置
{{{
getLastKnownLocation()

返回移动终端最新的位置。

Returns:
  以map的形式返回提供者提供的位置信息。
  
}}}

===,,readLocation,,===
从所有可获得的提供者中返回当前的位置作为指示
{{{
readLocation()

从所有可获得的提供者中返回当前的位置作为指示。

Returns:
  以map的形式返回提供者提供的位置信息。
}}}

===,,startLocating,,===
开始收集位置数据
{{{
startLocating(
 Integer minDistance[可选，默认是 60000]: 最小的更新时间,单位是毫秒,
 Integer minUpdateDistance[可选, 默认是 30]:最小的更新距离,单位是米)

开始收集位置数据。
触发"location"事件.
}}}

===,stopLocating,,===
停止获取位置数据
{{{
stopLocating()

停止获取位置数据。
}}}

===,,recorderCaptureVideo,,===
录制视频（和音频）并把它存放的制定路径
{{{
recorderCaptureVideo(
 String targetPath,
 Double duration[可选],
 Boolean recordAudio[可选, 默认是 true])

录制视频（和音频）并把它存放的制定路径。
制定最长录制时间。
如果未指定持续时间参数则方法会立即返回，只有当recorderStop方法被调用或脚本退出时录制才会停止。
除此之外录制会持续duration参数指定的时间。
}}}

===,,recorderStartMicrophone,,===
录音并保存到指定的路径
{{{
recorderStartMicrophone(
 String targetPath)

录音并保存到指定的路径。
}}}

===,,recorderStop,,===
停止一个之前开始的摄像
{{{
recorderStop()

停止一个之前开始的摄像。
}}}

===,,startInteractiveVideoRecording,,===
运行视频拍摄程序拍摄视频并保存的指定路径
{{{
startInteractiveVideoRecording(
 String path)

运行视频拍摄程序拍摄视频并保存的指定路径。
}}}

===,,checkNetworkRoaming,,===
检测当前网络是否处于漫游状态
{{{
checkNetworkRoaming()

如果当前GSM网络连接处于漫游状态，则返true。
}}}

===,,getCellLocation,,===
返回当前移动终端的位置。
{{{
getCellLocation()

返回当前移动终端的位置。
}}}

===,,getDeviceId,,===
返回当前移动终端的唯一标识
{{{
getDeviceId()

返回当前移动终端的唯一标识,例如GSM网络返回IMEI码,CDMA网络返回MEID码。
当移动终端的标识不可获得时，返回null。
}}}

===,,getDeviceSoftwareVersion,,===
返回移动终端的软件版本
{{{
getDeviceSoftwareVersion()

返回移动终端的软件版本，例如：GSM手机的IMEI/SV码。
如果软件版本不可获得，则返回null。 
}}}

===,,getLine1Number,,===
在一行中返回手机号
{{{
getLine1Number()

在一行中返回手机号码，例如返回GSM的MSISDN号。
如果获取不到则返回null。
}}}

===,,getNeighboringCellInfo,,===
返回当前移动终端附近移动终端的信息
{{{
getNeighboringCellInfo()

返回当前移动终端附近移动终端的信息。
}}}

===,,getNetworkOperator,,===
返回当前已注册运营商的数值名称
{{{
getNetworkOperator()

返回当前已注册运营商的数值名称（MCC+MNC）（移动国家码+移动网络码）。
}}}

===,,getNetworkOperatorName,,===
返回当前注册运营商的字母名称
{{{
getNetworkOperatorName()

返回当前注册运营商的字母名称。
}}}

===,,getNetworkType,,===
返回移动终端当前使用的无线技术（网络类型）
{{{
getNetworkType()

返回移动终端当前使用的无线技术（网络类型）。
}}}

===,,getPhoneType,,===
返回移动终端的类型
{{{
getPhoneType()

返回移动终端的类型。
}}}

===,,getSimCountryIso,,===
返回符合iso标注的国家码
{{{
getSimCountryIso()

Returns the ISO country code equivalent for the SIM provider's country code.
返回符合iso标注的国家码，等同于sim卡提供商的国家码
}}}

===,,getSimOperator,,===
返回Sim卡提供商的移动国家码和移动网络码组合
{{{
getSimOperator()

返回Sim卡提供商的移动国家码和移动网络码组合,是个5或6位的数字。
}}}

===,,getSimOperatorName,,===
返回服务运营商的名称
{{{
getSimOperatorName()

返回服务运营商的名称（SPN）
}}}

===,,getSimSerialNumber,,===

{{{
getSimSerialNumber()
返回sim卡的序列号
返回sim卡的序列号，如果无法获得则返回null。
}}}

===,,getSimState,,===
返回移动终端
{{{
getSimState()

返回移动终端。
}}}

===,,getSubscriberId,,===
返回用户唯一标识
{{{
getSubscriberId()

返回用户唯一标识，比如GSM网络的IMSI编号。
如果不可获得则返回null。
}}}

===,,getVoiceMailAlphaTag,,===
获取语音信箱号码关联的字母标识
{{{
getVoiceMailAlphaTag()

获取语音信箱号码关联的字母标识。
}}}

===,,getVoiceMailNumber,,===
返回语音邮件号码
{{{
getVoiceMailNumber()

返回语音邮件号码。如果无法获得则返回null。
}}}

===,,phoneCall,,===
通过URI调用一个联系人或电话号码
{{{
phoneCall(
  String uri)

通过URI调用一个联系人或电话号码。
}}}

===,,phoneCallNumber,,===
拨打一个电话号码
{{{
phoneCallNumber(
  String phone number)

拨打一个电话号码。
}}}

===,,phoneDial,,===
通过URI拨号
{{{
phoneDial(
  String uri)

通过URI拨号
}}}

===,,phoneDialNumber,,===
拨打一个电话号码
{{{
phoneDialNumber(
  String phone number)

拨打一个电话号码。
}}}

===,,readPhoneState,,===
返回当前移动终端状态和打入电话
{{{
readPhoneState()

Returns the current phone state and incoming number.
返回当前移动终端状态和打入电话
Returns:
  以map的形式保存的tate"state" 和 "incomingNumber"
}}}

===,,startTrackingPhoneState,,===
开始追踪移动终端状态。
{{{
startTrackingPhoneState()

开始追踪移动终端状态。
产生“Phone”事件
}}}

===,,stopTrackingPhoneState,,===
停止追踪移动终端状态
{{{
stopTrackingPhoneState()

停止追踪移动终端状态。
}}}

===,,pulseGeneratorGetHz,,===
包装时钟发生器getHz()
{{{
pulseGeneratorGetHz()

包装时钟发生器getHz()。
}}}

===,,pulseGeneratorGetHzSamples,,===
包装时钟发生器方法getHzSamples()
{{{
pulseGeneratorGetHzSamples()

包装时钟发生器方法getHzSamples()。
}}}

===,,pulseGeneratorGetLeftPulseMs,,===
包装时钟发生器方法getLeftPulseMs()
{{{
pulseGeneratorGetLeftPulseMs()

包装时钟发生器方法getLeftPulseMs()。

}}}

===,,pulseGeneratorGetLeftPulsePercent,,===
包装时钟发生器方法getLeftPulsePercent()
{{{
pulseGeneratorGetLeftPulsePercent()

包装时钟发生器方法getLeftPulsePercent()。

}}}

===,,pulseGeneratorGetLeftPulseSamples,,===
包装时钟发生器方法getLeftPulseSamples()
{{{
pulseGeneratorGetLeftPulseSamples()

包装时钟发生器方法getLeftPulseSamples()。

}}}

===,,pulseGeneratorGetRightPulseMs,,===
包装时钟发生器方法getRightPulseMs()
{{{
pulseGeneratorGetRightPulseMs()

包装时钟发生器方法getRightPulseMs()。
}}}

===,,pulseGeneratorGetRightPulsePercent,,===
包装时钟发生器方法getRightPulsePercent()
{{{
pulseGeneratorGetRightPulsePercent()

包装时钟发生器方法getRightPulsePercent()。
}}}

===,,pulseGeneratorGetRightPulseSamples,,===
包装时钟发生器方法getRightPulseSamples()
{{{
pulseGeneratorGetRightPulseSamples()

包装时钟发生器方法getRightPulseSamples()。
}}}

===,,pulseGeneratorIsPlaying,,===
包装时钟发生器方法isPlaying()
{{{
pulseGeneratorIsPlaying()

包装时钟发生器方法isPlaying()。
}}}

===,,pulseGeneratorRun,,===
包装时钟发生器方法run()
{{{
pulseGeneratorRun()

包装时钟发生器方法run()。
}}}

===,,pulseGeneratorSetHzPercent,,===
包装时钟发生器方法setHzPercent()
{{{
pulseGeneratorSetHzPercent(
 Integer percent)

包装时钟发生器方法setHzPercent()
}}}

===,,pulseGeneratorSetLeftPulsePercent,,===
包装时钟发生器方法setLeftPulsePercent()
{{{
pulseGeneratorSetLeftPulsePercent(
 Integer percent)

包装时钟发生器方法setLeftPulsePercent()。
}}}

===,,pulseGeneratorSetRightPulsePercent,,===
包装时钟发生器方法setRightPulsePercent()
{{{
pulseGeneratorSetRightPulsePercent(
 Integer percent)

包装时钟发生器方法setRightPulsePercent()。
}}}

===,,pulseGeneratorStop,,===
包装时钟发生器方法stop()
{{{
pulseGeneratorStop()

包装时钟发生器方法stop()。
}}}

===,,pulseGeneratorToggleInverted,,===
包装时钟发生器方法toggleInverted()
{{{
pulseGeneratorToggleInverted()

包装时钟发生器方法toggleInverted()。
}}}

===,,pulseGeneratorTogglePlayback,,===
包装时钟发生器方法togglePlayback()
{{{
pulseGeneratorTogglePlayback()

包装时钟发生器方法togglePlayback()。

}}}

===,,pulseGenteratorSetHz,,===
包装时钟发生器方法setHz()
{{{
pulseGenteratorSetHz(
  Float hz)
包装时钟发生器方法setHz()。
}}}

===,,readSensors,,===
返回当前接受到的传感器信息
{{{
readSensors()

返回当前接受到的传感器信息。
}}}

===,,sensorsGetAccuracy,,===
返回当前接受到的精确值
{{{
sensorsGetAccuracy()

返回当前接收到的精度值。
}}}

===,,sensorsGetLight,,===
返回当前接收到的光度值
{{{
sensorsGetLight()

Returns the most recently received light value.
返回当前接收到的光度值。
}}}

===,,sensorsReadAccelerometer,,===
返回最近接收到的加速度值
{{{
sensorsReadAccelerometer()

返回最近接收到的加速度值。

Returns:
  以列表形式存放的float值 [(加速度在) X 轴, Y 轴, Z 轴]。
}}}

===,,sensorsReadMagnetometer,,===
返回最近接收到的引力值
{{{
sensorsReadMagnetometer()

返回当前接收到的引力值。

Returns:
 以列表形式存放的float值 [(引力值在) X 轴, Y 轴, Z 轴]。
}}}

===,,sensorsReadOrientation,,===

{{{
sensorsReadOrientation()

Returns the most recently received orientation values.
返回当前接受到的方向值。

Returns:
  以列表形式存放的Doubles值 [方位角, 仰角, 转动角度].
}}}

===,,startSensing,,===
开始记录传感器数据供轮询
{{{
startSensing(
 Integer sampleSize[可选, 默认值为 5]: 求平均值时的样本数)

开始记录传感器数据供轮询。

产生"sensors"事件
}}}

===,,stopSensing,,===
停止收集传感器信息
{{{
stopSensing()

停止收集传感器信息。
}}}

===,,checkAirplaneMode,,===
检查是否设置了飞行模式
{{{
checkAirplaneMode()

检查是否设置了飞行模式。

返回值:
  如果打开了飞行模式则返回True。
}}}

===,,checkRingerSilentMode,,===
检测是否设置了静音模式
{{{
checkRingerSilentMode()

检测是否设置了静音模式。

返回值:
  如果处于静音模式则返回True。
}}}

===,,checkScreenOn,,===
检测当前屏幕是否关闭
{{{
checkScreenOn()

检测当前屏幕是否关闭（需要 API level 7支持）

返回:
  如果屏幕打开则返回True
}}}

===,,getMaxMediaVolume,,===
返回媒体音量的最大值
{{{
getMaxMediaVolume()

返回媒体音量的最大值。
}}}

===,,getMaxRingerVolume,,===
返回最大的音量值
{{{
getMaxRingerVolume()

返回铃声的最大音量值。
}}}

===,,getMediaVolume,,===

{{{
getMediaVolume()

返回当前媒体音量。
}}}

===,,getRingerVolume,,===
返回当前铃声的音量
{{{
getRingerVolume()

返回当前铃声的音量。
}}}

===,,getScreenBrightness,,===
返回屏幕的亮度
{{{
getScreenBrightness()

Returns the screen backlight brightness.
返回屏幕的亮度。

返回值:
  返回当前的屏幕亮度，范围在 0 到 255之间
}}}

===,,getScreenTimeout,,===
返回当前屏幕的超时时间，以秒为单位
{{{
getScreenTimeout()

返回当前屏幕的超时时间，以秒为单位。

Returns:
  当前超时时间。
}}}

===,,setMediaVolume,,===
设置媒体音量
{{{
setMediaVolume(
  Integer volume)

设置媒体音量。
}}}

===,,setRingerVolume,,===
设置铃声音量
{{{
setRingerVolume(
  Integer volume)

设置铃声音量。
}}}

===,,setScreenBrightness,,===
设置屏幕的亮度
{{{
setScreenBrightness(
 Integer value: 亮度值,范围在 0 到 255之间)

设置屏幕的亮度。

返回值:
  屏幕的原始亮度。
}}}

===,,setScreenTimeout,,===
设置屏幕超时关闭时间,以秒为单位
{{{
setScreenTimeout(
 Integer value)

设置屏幕超时关闭时间,以秒为单位。

返回值:
  屏幕原始的超时时间。
}}}

===,,toggleAirplaneMode,,===
打开或者关闭飞行模式
{{{
toggleAirplaneMode(
 Boolean enabled[可选])

打开或者关闭飞行模式。

返回值:
  如果处于飞行模式则返回True。
}}}

===,,toggleRingerSilentMode,,===
设置静音模式
{{{
toggleRingerSilentMode(
 Boolean enabled[可选])

打开或者关闭静音模式。

返回值:
  如果处于静音模式则返回True。
}}}